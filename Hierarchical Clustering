#HIERARCHICAL CLUSTERING IN PYTHON

# Import libraries
import pandas as pd
from sklearn.cluster import AgglomerativeClustering
from scipy.cluster.hierarchy import dendrogram, linkage
import matplotlib.pyplot as plt
from sklearn.preprocessing import StandardScaler
import numpy as np
import seaborn as sns

#SIMPLE EXAMPLE

# Scikit-learn has a make_blobs function to make data sets
from sklearn.datasets import make_blobs

# Create data set
X, y = make_blobs(n_samples=60, n_features=2, 
                  centers=4, cluster_std=1.7,
                  random_state=10, shuffle=True)

# Plot
plt.title('Artificially created data set')
plt.scatter(X[:, 0], X[:, 1], c='yellow', marker='o', edgecolor='blue', s=30)
plt.show()

# Find the optimal number of clusters using a dendrogram
dendro = dendrogram(linkage(X, method  = "ward"))
plt.title('Dendrogram')
plt.ylabel('Euclidean distances')
plt.show()

# The same example, but more dispersed from the centroid
X, y = make_blobs(n_samples=60, n_features=2, 
                  centers=4, cluster_std=5, #higher stdev
                  random_state=10, shuffle=True)

# Find the optimal number of clusters using a dendrogram
dendro = dendrogram(linkage(X, method  = "ward"))
plt.title('Dendrogram')
plt.ylabel('Euclidean distances')
plt.show()

# Create a more typical four-dimensional data set with 8 clusters
X, y = make_blobs(n_samples=160, n_features=4, #4dimentional space, 8blobs
                  centers=8, cluster_std=2,
                  random_state=10, shuffle=True)

# Find the optimal number of clusters using a dendrogram
dendro = dendrogram(linkage(X, method  = "ward"))
plt.title('Dendrogram')
plt.ylabel('Euclidean distances')
plt.show()   #the more dimentions you have, the more difficult it is to identify clusters

 # Import data (import on first 3,000 rows)
df = pd.read_csv("household_power_consumption.txt",delimiter=";",nrows=2*60*24)

# Remove '?' entries
df = df.replace('?',np.nan)

# Explore the size of the data set
df.shape

# Explore the type of data and feature names
df.head()

# Remove the Date and Time features #these could influence usage,ex. season and cooking time
# Time of day could be a useful feature but would require re-coding into a continuous variable, e.g. 0â€“1
# Date = seasonality, Time = pattern of daily use

X = df.iloc[:,2:]

# Find the optimal number of clusters using a dendrogram
# Note that it may take a while for this graph to be generated

dendro = dendrogram(linkage(X, method  = "ward"))
plt.title('Dendrogram')
plt.ylabel('Euclidean distances')
plt.show()

# Fit with three clusters
hc = AgglomerativeClustering(n_clusters = 3, affinity = 'euclidean', linkage ='ward')

y_hc=hc.fit_predict(X)

# Set up a dataframe with cluster levels
Xnew = X.copy()
Xnew["CLUSTERS"] = y_hc
Xnew.sample(10, random_state=0)

...

# Plot voltage and the sub_metering stations
# YOUR NEW CODE HERE


var = ["Voltage", "Sub_metering_1", "Sub_metering_2", "Sub_metering_3"]
sns.pairplot(Xnew, vars=var, hue="CLUSTERS", palette=sns.color_palette("hls", 3))
